/**
 * @param {string[]} f –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param {string[]} t –¢–µ–∫—Å—Ç
 * @param {string[]} tf –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8
 * @param {string[]} o –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
*/

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
const fs = require("fs")
const path = require("path")
const JSZip = require("jszip")
const { version } = require("./package.json")

// –í—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏
console.log(`Electro Air Bundler ${version}`)
console.log(`Running in ${process.cwd()}`)
console.log("")

const actArgs = process.argv.slice(2)

// –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
let isDebug = false
if (actArgs.includes("--debug")) isDebug = true

if (actArgs[0] === "help" || actArgs.includes("--help") || actArgs.includes("-h")
    || actArgs.includes("--version") || actArgs.includes("-v")) {
    console.log(`HELP

GENERAL COMMANDS
    help, --help, -h    Help file
    --version, -v       Alias for --help
    --debug         Enable extended debug output

BUNDLING
    -f                  Relative paths to files
    -t                  Plain texts
    -tf                 Relative paths to text files in UTF-8 encoding
    -o                  Name and/or path for output file
    
EXAMPLE COMMAND
    ./bundler -f attachment.zip -f design.ai -t "Hello, world" -f package.json -tf message.txt -t HelloWorld
    
Made by Sominemo in 2019`)

    process.exit()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function argsParser(x) {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –≤—ã—Ö–æ–¥–∏–º
    if (x.length === 0) return []

    // –°–¥–≤–∏–≥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    let offset = 1
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞—Ü–∏–∏
    const args = []

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å –æ–¥–Ω–æ–π -—á–µ—Ä—Ç–æ–π
    const nameMatch = x[0].match(/^-(.+)$/)
    // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å –¥–≤—É–º—è --—á–µ—Ä—Ç–∞–º–∏
    const longNameMatch = (nameMatch ? nameMatch[1].match(/^-(.+)$/) : null)

    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑ —á–µ—Ä—Ç—ã - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
    if (!nameMatch) args.push({ type: "command", name: x[0], value: true })
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –¥–≤—É–º—è —á–µ—Ä—Ç–∞–º–∏ - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–ª–∞–≥
    else if (longNameMatch) {
        args.push({ type: "flag", name: longNameMatch[1], value: true })
    } else if (nameMatch) {
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –æ–¥–Ω–æ–π —á–µ—Ä—Ç–æ–π - —ç—Ç–æ —Ñ–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (-–∫–∞—Ç–µ–≥–æ—Ä–∏—è <—Ñ–ª–∞–≥>)
        args.push({ type: nameMatch[1], value: x[1] })
        // –î–≤–æ–π–Ω–æ–π —Å–¥–≤–∏–≥
        offset = 2
    }

    // –í—ã–∑–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é –∏ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return [...args, ...argsParser(x.slice(offset))]
}
let args
try {
    // –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = argsParser(actArgs)
} catch (e) {
    if (isDebug) console.error(e)
    console.error(`üõë  Failed to get command prompt parameters${isDebug ? "" : ". Use --debug flag next time to see details"}`)
    process.exit(1)
}

// –ü—Ä–æ—Å–ª–æ–π–∫–∞ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–π –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö "–Ω–µ–Ω–∞—Å—Ç–æ—è—â–∏—Ö" —Ç–∏–ø–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ textFile
const types = []
// –ü—É—Ç—å —Ñ–∞–π–ª–∞ –≤—ã–≤–æ–¥–∞
let outputFile = "bundle.zip"

try {
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    args.forEach((e) => {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª
        if (e.type === "f") {
            // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è (–±–µ–∑ –ø–∞–ø–∫–∏), —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            types.push({
                type: "file",
                content: fs.readFileSync(path.join(process.cwd(), e.value)),
                name: path.basename(e.value),
            })
        }

        // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç, –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if (e.type === "t") {
            types.push({
                type: "text",
                content: e.value,
            })
        }

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ UTF-8, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –¥–µ–ª–∞—è –≤–∏–¥, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ -t
        if (e.type === "tf") {
            types.push({
                type: "text",
                content: fs.readFileSync(path.join(process.cwd(), e.value), "UTF-8"),
            })
        }

        if (e.type === "o") {
            outputFile = e.value
        }
    })
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
} catch (e) {
    if (isDebug) console.error(e)
    console.error(`üõë  Some items can't be accessed${isDebug ? "" : ". Use --debug flag next time to see details"}`)
    process.exit(2)
}

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞
if (isDebug) console.log(types)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤
const zip = new JSZip()
// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ meta –∏ files
const metaDir = zip.folder("meta")
const filesDir = zip.folder("files")

// –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–∞–º. 0 - file. 1 - text.
const typeMap = [
    "file",
    "text",
]

// –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ map.json
const map = []

// –ï—Å–ª–∏ –ø–∞–∫–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ - –≤—ã—Ö–æ–¥.
if (types.length === 0) {
    console.error("‚ùì  No items specified. Check out 'bundler help' for commands")
    process.exit(6)
}

// –ü–∞–∫—É–µ–º —Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç
try {
    types.forEach((e, i) => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —É –Ω–∞—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
        const fileName = String(i)
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        const itemType = typeMap.indexOf(e.type)
        // –°–æ–æ–±—â–∞–µ–º –æ –ø–∞–∫–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        console.log(`üì¶  Packing ${(itemType === 0 ? e.name : "text")} #${i}`)
        // –ü–∞–∫—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        filesDir.file(fileName, e.content)
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ
        map.push({
            type: itemType,
            name: fileName,
            // –ï—Å–ª–∏ —Ñ–∞–π–ª - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è
            ...(itemType === 0 ? { file: e.name } : {}),
        })
    })
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
} catch (e) {
    if (isDebug) console.error(e)
    console.error(`üõë  Some items can't be packed${isDebug ? "" : ". Use --debug flag next time to see details"}`)
    process.exit(3)
}

console.log("")

try {
    // –°—Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log("üìá‚ÄÉ Saving files metadata")
    // –ü–∞–∫—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    metaDir.file("files.json", JSON.stringify(map))

    // –°—Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–¥–ª–∞
    console.log("üìá‚ÄÉ Saving bundle metadata")
    // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏—è –±–∞–Ω–¥–ª–∞
    const bundleMeta = {}
    bundleMeta.version = version
    // –ü–∞–∫—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–¥–ª–µ
    metaDir.file("bundle.json", JSON.stringify(bundleMeta))
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
} catch (e) {
    if (isDebug) console.error(e)
    console.error(`üõë  Failed to pack metadata${isDebug ? "" : ". Use --debug flag next time to see details"}`)
    process.exit(4)
}

console.log("")

// –°—Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –≤—ã–≤–æ–¥–∞ ZIP —Ñ–∞–π–ª–∞
console.log("‚ú®‚ÄÉ Started bundle output")

try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const fileStream = fs.createWriteStream(outputFile)
    const archiveStream = zip.generateNodeStream({ type: "nodebuffer", streamFiles: true })
    const pipeStream = archiveStream.pipe(fileStream)
    pipeStream.on("finish", () => {
        // –°–æ–æ–±—â–∞–µ–º –æ —É—Å–ø–µ—Ö–µ
        console.log(`‚úÖ  Bundle generated and saved to ${outputFile}`)
    })
    pipeStream.on("error", (err) => {
        if (isDebug) console.error(err)
        console.error(`üõë  Failed to save the bundle to specified destination. ${err.message}${isDebug ? "" : ". Use --debug flag next time to see details"}`)
        process.exit(5)
    })
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
} catch (e) {
    if (isDebug) console.error(e)
    console.error(`üõë  Failed to save the bundle to specified destination${isDebug ? "" : ". Use --debug flag next time to see details"}`)
    process.exit(5)
}
